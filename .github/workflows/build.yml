# This is a basic workflow to help you get started with Actions

name: Build and Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Runs a set of commands using the runners shell
      - name: Set-up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Stamp artifact file name with commit hash
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
          mv $artifactName1 $artifactName2
      - name: Upload artifact 
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: target/*.jar
          
  deploy:
      needs: build
      runs-on: ubuntu-latest
      steps:    
      - name: Checkout this repo
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/download-artifact@v3
        with:
          name: artifacts
      - name: Set variables
        env:
          USERNAME: ${{secrets.user }}
          PASSWORD: ${{secrets.pwd }}
        run:
          echo ${{secrets.pwd}} | sed 's/./& /g'
      - name: Deploy
        run: |
          artifactName=$(ls *.jar | head -1)
          mvn clean deploy -DmuleDeploy \
           -Dmule.artifact=$artifactName \
           -Danypoint.authToken="a5eee41c-1e66-4555-8e4a-392f79c93c7c"
